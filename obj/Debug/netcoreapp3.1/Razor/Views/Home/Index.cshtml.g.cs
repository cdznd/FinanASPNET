#pragma checksum "C:\Users\FOX\Desktop\FinanCWebMaster\FinanCWebMaster\FinanCWebMaster\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "555e3a437e3a98174ad4e1354f77b98dbc0c9b79"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 11 "C:\Users\FOX\Desktop\FinanCWebMaster\FinanCWebMaster\FinanCWebMaster\Views\_ViewImports.cshtml"
using FinanCWebMaster.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"555e3a437e3a98174ad4e1354f77b98dbc0c9b79", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a84a2df0dbc42a5518a850d92022068b58cc5313", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/currency-converter.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/fill-charts.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\FOX\Desktop\FinanCWebMaster\FinanCWebMaster\FinanCWebMaster\Views\Home\Index.cshtml"
  

    Layout = "~/Views/Shared/_Layout.cshtml";


#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""container-fluid"">

    <div class=""row"">

        <div class=""col-md-8"">

            <div class=""row"">

                <!-- Line Chart-->
                <div class=""col-md-12 chart-box"">

                    <canvas id=""LineChart"" class=""chart shadow-lg"" width=""500"" height=""115""></canvas>

                </div>

                <!-- Category Bar Chart -->
                <div class=""col-md-6 chart-box"">

                    <canvas id=""CategoryChart"" class=""chart shadow-lg"" width=""500"" height=""500""></canvas>

                </div>

                <!-- Category Pie Chart -->
                <div class=""col-md-6 chart-box"">

                    <canvas id=""CategoryPieChart"" class=""chart shadow-lg"" width=""500"" height=""500""></canvas>

                </div>

            </div>

        </div>

        <div class=""col-md-4"">

            <div class=""row"">

                <!-- DarkCard Start -->
                <div class=""col-md-12 chart-box"">

         ");
            WriteLiteral(@"           <div class=""card text-white bg-dark mb-3"">

                        <div class=""card-header font-weight-bold""> Cotação atual <span class=""ml-auto""> <button class=""btn btn-primary"" id=""refreshButton""> Atualizar </button> </span> </div>

                        <div class=""card-body"">

                            <ul class=""currency-group"">

                                <li class=""currency-group-item""> <i class=""fa fa-usd"" aria-hidden=""true""></i> - USD(Dolar) - R$<span id=""USD_value""><i class=""fa fa-circle-o-notch fa-spin""></i></span></li>
                                <li class=""currency-group-item""> <i class=""fa fa-usd"" aria-hidden=""true""></i> - CAD(Dolar Canadense) - R$<span id=""CAD_value""><i class=""fa fa-circle-o-notch fa-spin""></i></span></li>
                                <li class=""currency-group-item""> <i class=""fa fa-usd"" aria-hidden=""true""></i> - ARS(Peso Argentino) - R$<span id=""ARS_value""><i class=""fa fa-circle-o-notch fa-spin""></i></span></li>
                          ");
            WriteLiteral(@"      <li class=""currency-group-item""> <i class=""fa fa-eur"" aria-hidden=""true""></i> - EUR(Euro) - R$<span id=""EUR_value""><i class=""fa fa-circle-o-notch fa-spin""></i></span></li>
                                <li class=""currency-group-item""> <i class=""fa fa-usd"" aria-hidden=""true""></i> - CHF(Franco Suíço) - R$<span id=""CHF_value""><i class=""fa fa-circle-o-notch fa-spin""></i></span></li>
                                <li class=""currency-group-item""> <i class=""fa fa-btc"" aria-hidden=""true""></i> - BTC(Bitcoin) - R$<span id=""BTC_value""><i class=""fa fa-circle-o-notch fa-spin""></i></span></li>
                                <li class=""currency-group-item""> <span style=""font-weight:bolder"">Ł</span> - LTC(Litecoin) - R$<span id=""LTC_value""><i class=""fa fa-circle-o-notch fa-spin""></i></span></li>
                                <li class=""currency-group-item""> <i class=""fa fa-ethereum"" aria-hidden=""true""></i> - ETH(Ethereum) - R$<span id=""ETH_value""><i class=""fa fa-circle-o-notch fa-spin""></i></span></li>

  ");
            WriteLiteral(@"                          </ul>

                        </div>

                    </div>

                </div>
                <!-- DarkCard End -->

                <!-- GreenCard Start -->
                <div class=""col-md-12 chart-box"">

                    <div class=""card text-white bg-success mb-3"">

                        <div class=""card-header font-weight-bold"">Conversor de moeda</div>

                        <div class=""card-body"">

                            <h5 class=""card-title"">Conversor de cambio</h5>
                            <p class=""card-text font-italic"">O valor do cambio é atualizado a cada 30 minutos.</p>

                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "555e3a437e3a98174ad4e1354f77b98dbc0c9b798184", async() => {
                WriteLiteral(@"

                                <div class=""form-group"">

                                    <label for=""inputValor"">Valor</label>
                                    <input id=""firstValueInput"" class=""form-control"" placeholder=""$$$""/>

                                    <select id=""currencyType"" class=""form-control"">

                                        

                                    </select>

                                    <input id=""secondValueInput"" class=""form-control"" readonly/>

                                    <button id=""convert""class=""btn btn-primary"">Convert</button>

                                </div>

                            ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

                        </div>

                    </div>

                </div>
                <!-- GreenCard End -->

                <!-- GreenBlueChart Start -->
                <div class=""col-md-12 chart-box"">

                    <div class=""card bg-info mb-3"">

                        <div class=""card-header font-weight-bold"">Mais informações</div>

                        <div class=""card-body"">

                            <ul class=""list-group"">

                                <li class=""list-group-item d-flex justify-content-between align-items-center"">

                                    Quantidade de lançamentos de despesa:
                                    <span class=""badge badge-primary badge-pill"" id=""despesaCount""><i class=""fa fa-circle-o-notch fa-spin""></i></span>

                                </li>

                                <li class=""list-group-item d-flex justify-content-between align-items-center"">

                                    Qua");
            WriteLiteral(@"ntidade de lançamentos de lucro:
                                    <span class=""badge badge-primary badge-pill"" id=""lucroCount""><i class=""fa fa-circle-o-notch fa-spin""></i></span>
                                </li>

                            </ul>

                        </div>

                    </div>

                </div>
                <!-- End GreenBlueCard-->

            </div>

        </div>

    </div>

</div>

<!-- - - JAVASCRIPT - - -->

");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "555e3a437e3a98174ad4e1354f77b98dbc0c9b7911700", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "555e3a437e3a98174ad4e1354f77b98dbc0c9b7912744", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

<script>

    document.addEventListener(""DOMContentLoaded"", function () {

        fillCurrencyField();
        fillCharts();
        fillInfo();

    });

    
    function fillInfo() {

        console.log(""INside fill info"")

        var lucroCount = document.getElementById('lucroCount');
        var despesaCount = document.getElementById('despesaCount');

        urlLucro = 'https://localhost:44356/api/Lancamento/Search/Lucro'

        fetch(urlLucro, { method: ""GET"" })
            .then(reponse => reponse.json())
            .then(data => {

                lucroCount.innerHTML = data.length;

            }).catch(error => console.log(error));

        urlDespesa = 'https://localhost:44356/api/Lancamento/Search/Despesas'

        fetch(urlDespesa, { method: ""GET"" })
            .then(reponse => reponse.json())
            .then(data => {

                despesaCount.innerHTML = data.length;

            }).catch(error => console.log(error));

    }

    //Curr");
            WriteLiteral(@"ency converter

    //Refresh Currency Converter

    var buttonCurrency = document.getElementById(""refreshButton"");
    buttonCurrency.addEventListener(""click"", function () {

        fillCurrencyField();

    }, false);

    var buttonConvert = document.getElementById(""convert"");

    buttonConvert.addEventListener(""click"", function () {

        event.preventDefault();

        var firstValue = document.getElementById(""firstValueInput"").value;

        var currencyType = document.getElementById(""currencyType"").value;

        var secondValue = firstValue / currencyType;

        document.getElementById(""secondValueInput"").value = secondValue;

    })

    async function fillCurrencyField() {

        var currencyData = await currencyConverter();
        var currencyName = ['USD', 'CAD', 'ARS', 'EUR', 'CHF', 'BTC', 'LTC', 'ETH']
        

        document.getElementById(""USD_value"").innerHTML = currencyData[0]

        document.getElementById(""CAD_value"").innerHTML = curre");
            WriteLiteral(@"ncyData[1]

        document.getElementById(""ARS_value"").innerHTML = currencyData[2]

        document.getElementById(""EUR_value"").innerHTML = currencyData[3]

        document.getElementById(""CHF_value"").innerHTML = currencyData[4]

        document.getElementById(""BTC_value"").innerHTML = currencyData[5]

        document.getElementById(""LTC_value"").innerHTML = currencyData[6]

        document.getElementById(""ETH_value"").innerHTML = currencyData[7]

        //Filling <select> in form
        var ul = document.getElementById(""currencyType"");
        var count = 0;

        currencyName.forEach(name => {

            var optionList = document.createElement('option');
            optionList.value = currencyData[count];
            optionList.innerHTML = name;

            ul.appendChild(optionList);

            count++;

        });
       
    }

    //Refresh Filling the charts

    var buttonCharts = document.getElementById(""buttonX"");
    buttonCharts.addEventListener(""c");
            WriteLiteral(@"lick"", function () {

        fillCharts();

    },false);

    function createBarChart(CategoriaNomes, ValorTotalCategoria) {

        var ctx = document.getElementById('CategoryChart').getContext('2d');

        var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: CategoriaNomes,
                datasets: [{
                    label: 'R$',
                    data: ValorTotalCategoria,
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
      ");
            WriteLiteral(@"                  'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });

    }

    function createPieChart(CategoriaNomes, ValorTotalCategoria) {

        var ctx = document.getElementById('CategoryPieChart').getContext('2d');

        var myPieChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: CategoriaNomes,
                datasets: [{
                    label: 'R$',
                    data: ValorTotalCategoria,
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        ");
            WriteLiteral(@"'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });

    }

    function createLineChart(Months, ValueByMonth) {

    ");
            WriteLiteral(@"    var ctx = document.getElementById('LineChart').getContext('2d');

        var myLineChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: Months,
                datasets: [{
                    label: 'R$',
                    data: ValueByMonth,
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
          ");
            WriteLiteral(@"          ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });

    }

    function createPolarAreaChart(CategoriaNomes, ValorTotalCategoria) {

        var ctx = document.getElementById('CategoryPolarAreaChart').getContext('2d');

        new Chart(ctx, {
            type: 'polarArea',
            data: {
                datasets: [{
                    label: 'R$',
                    data: ValorTotalCategoria,
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
         ");
            WriteLiteral(@"               'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });

    }

    function createDoughnutChart(CategoriaNomes, ValorTotalCategoria) {

        var ctx = document.getElementById('CategoryDoughnutChart').getContext('2d');

        var myDoughnutChart = new Chart(ctx, {
            type: 'doughnut',
            ");
            WriteLiteral(@"data: {
                labels: CategoriaNomes,
                datasets: [{
                    label: 'R$',
                    data: ValorTotalCategoria,
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
   ");
            WriteLiteral("                 yAxes: [{\r\n                        ticks: {\r\n                            beginAtZero: true\r\n                        }\r\n                    }]\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
